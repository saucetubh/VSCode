$date
	Mon Sep 15 16:58:21 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_rollcall_match $end
$var wire 2 ! Y [1:0] $end
$var wire 1 " PAR $end
$var wire 4 # MATCH [3:0] $end
$var wire 2 $ FIRST [1:0] $end
$var wire 1 % ANY $end
$var reg 1 & MODE $end
$var reg 2 ' PAT [1:0] $end
$var reg 2 ( S0 [1:0] $end
$var reg 2 ) S1 [1:0] $end
$var reg 2 * S2 [1:0] $end
$var reg 2 + S3 [1:0] $end
$scope module r $end
$var wire 1 % ANY $end
$var wire 1 & MODE $end
$var wire 1 " PAR $end
$var wire 2 , PAT [1:0] $end
$var wire 2 - S0 [1:0] $end
$var wire 2 . S1 [1:0] $end
$var wire 2 / S2 [1:0] $end
$var wire 2 0 S3 [1:0] $end
$var wire 2 1 Y [1:0] $end
$var wire 4 2 P4 [3:0] $end
$var wire 4 3 P3 [3:0] $end
$var wire 4 4 P2 [3:0] $end
$var wire 4 5 P1 [3:0] $end
$var wire 4 6 MATCH [3:0] $end
$var wire 2 7 FIRST [1:0] $end
$var wire 4 8 Con [3:0] $end
$scope module ENC1 $end
$var wire 4 9 A [3:0] $end
$var wire 1 % E $end
$var wire 2 : O [1:0] $end
$upscope $end
$scope module IE1 $end
$var wire 4 ; A [3:0] $end
$var wire 4 < B [3:0] $end
$var wire 1 = O $end
$upscope $end
$scope module IE2 $end
$var wire 4 > A [3:0] $end
$var wire 4 ? B [3:0] $end
$var wire 1 @ O $end
$upscope $end
$scope module IE3 $end
$var wire 4 A A [3:0] $end
$var wire 4 B B [3:0] $end
$var wire 1 C O $end
$upscope $end
$scope module IE4 $end
$var wire 4 D A [3:0] $end
$var wire 4 E B [3:0] $end
$var wire 1 F O $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
0F
b1011 E
b10 D
0C
b1011 B
b100 A
0@
b1011 ?
b1101 >
1=
b1011 <
b1011 ;
b0 :
b1 9
b1011 8
b0 7
b1 6
b1011 5
b1101 4
b100 3
b10 2
b11 1
b0 0
b1 /
b11 .
b10 -
b10 ,
b0 +
b1 *
b11 )
b10 (
b10 '
0&
1%
b0 $
b1 #
1"
b11 !
$end
#10
b11 $
b11 7
b11 :
1%
1"
1F
b1 !
b1 1
b1000 #
b1000 6
b1000 9
0=
b1001 8
b1001 <
b1001 ?
b1001 B
b1001 E
b1110 3
b1110 A
b11 4
b11 >
b100 5
b100 ;
b1001 2
b1001 D
1&
b10 +
b10 0
b11 *
b11 /
b0 )
b0 .
b1 (
b1 -
#20
b0 $
b0 7
b0 :
1%
1"
1=
b1 !
b1 1
b1 #
b1 6
b1 9
0F
b1 8
b1 <
b1 ?
b1 B
b1 E
b1011 3
b1011 A
b110 4
b110 >
b1 5
b1 ;
b1100 2
b1100 D
0&
b0 '
b0 ,
b11 +
b11 0
b10 *
b10 /
b1 )
b1 .
b0 (
b0 -
#30
b11 $
b11 7
b11 :
1%
1"
1F
b11 !
b11 1
b1000 #
b1000 6
b1000 9
0=
b11 8
b11 <
b11 ?
b11 B
b11 E
b100 3
b100 A
b1001 4
b1001 >
b1110 5
b1110 ;
b11 2
b11 D
1&
b0 +
b0 0
b1 *
b1 /
b10 )
b10 .
b11 (
b11 -
#40
b0 $
b0 7
b0 :
1%
1"
1=
b1 #
b1 6
b1 9
0F
b10 !
b10 1
b110 8
b110 <
b110 ?
b110 B
b110 E
b1011 4
b1011 >
b1100 3
b1100 A
b110 5
b110 ;
b1 2
b1 D
0&
b1 '
b1 ,
b11 *
b11 /
b1 (
b1 -
#50
b10 !
b10 1
b1 $
b1 7
b1 :
1%
1"
1@
b10 #
b10 6
b10 9
0=
b1110 8
b1110 <
b1110 ?
b1110 B
b1110 E
b1001 3
b1001 A
b1110 4
b1110 >
b11 5
b11 ;
b100 2
b100 D
1&
b11 '
b11 ,
b1 +
b1 0
b10 *
b10 /
b11 )
b11 .
b0 (
b0 -
#60
0%
0"
b0 $
b0 7
b0 :
b0 #
b0 6
b0 9
0@
b0 !
b0 1
b1011 8
b1011 <
b1011 ?
b1011 B
b1011 E
b1111 4
b1111 >
b1111 3
b1111 A
b1111 5
b1111 ;
b1111 2
b1111 D
0&
b10 '
b10 ,
b11 +
b11 0
b11 *
b11 /
b11 (
b11 -
#70
b110 8
b110 <
b110 ?
b110 B
b110 E
b111 3
b111 A
b1001 4
b1001 >
b10 5
b10 ;
b1100 2
b1100 D
b1 '
b1 ,
b1 *
b1 /
b10 )
b10 .
b0 (
b0 -
#80
b1 !
b1 1
b10 $
b10 7
b10 :
1%
1"
b100 #
b100 6
b100 9
1C
b1001 8
b1001 <
b1001 ?
b1001 B
b1001 E
b100 2
b100 D
b1001 3
b1001 A
b11 5
b11 ;
b1110 4
b1110 >
1&
b10 '
b10 ,
b1 +
b1 0
b10 *
b10 /
b11 )
b11 .
#90
0%
0"
b0 $
b0 7
b0 :
b0 #
b0 6
b0 9
0C
b0 !
b0 1
b1110 8
b1110 <
b1110 ?
b1110 B
b1110 E
b1000 2
b1000 D
b1101 4
b1101 >
b110 3
b110 A
b11 '
b11 ,
b10 +
b10 0
b1 *
b1 /
#100
b100 8
b100 <
b100 ?
b100 B
b100 E
b1100 3
b1100 A
b111 4
b111 >
b1001 5
b1001 ;
b10 2
b10 D
b1 '
b1 ,
b0 +
b0 0
b11 *
b11 /
b1 )
b1 .
b10 (
b10 -
#110
b1100 8
b1100 <
b1100 ?
b1100 B
b1100 E
b1101 3
b1101 A
b1011 4
b1011 >
b10 5
b10 ;
b100 2
b100 D
0&
b11 '
b11 ,
b1 +
b1 0
b10 )
b10 .
b0 (
b0 -
#130
